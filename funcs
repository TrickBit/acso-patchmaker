#
# ___THIS___=${0}
# ___ME___=$(basename -- ${___THIS___})
# lib_dir=$(dirname $(readlink -f ${___THIS___}))


# Remove some mystery
TRUE=0
FALSE=1
OVERWRITE=1
APPEND=0
ACSO_FUNCS_MSG_LOGFILE=''

# Gonna use this like this:
# ACSO_KERNEL_RECORD[title]=4.19.202
# ACSO_KERNEL_RECORD[support]=No
# ACSO_KERNEL_RECORD[endoflife]=No
# ACSO_KERNEL_RECORD[source]=linux-4.19.202.tar.xz
# ACSO_KERNEL_RECORD[released]=2021-08-08
# ACSO_KERNEL_RECORD[url]=https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.19.202.tar.xz
# ACSO_KERNEL_INFO_ARRAY[4.19.202]=ACSO_KERNEL_RECORD

ACSO_KERNEL_INFO_ARRAY_STR="New String"



# Little hack to try and trick mkcompile_h - they *whould unset when the script completes
hostname(){  echo "nowhere" ; }
whoami() { echo "no-one" ; }
#---------------------------------------------------------------------------
# part of the logging setup
# sets our logfile name and creates an empty file
# if the file exists it raises an error unless this finction includes an
# override flag
# usage:
# setlog "quoted/file/name" <overwrite>
# overwrite is an integer
# 1 (OVERWRITE)-  overwite existing file meaning or create new file if existing file is missing
# 0 (APPEND)   -  append existing file or create new file if existing file is missing (default)
#---------------------------------------------------------------------------
setlog(){
	local __MSG__
	local append
	append=$TRUE #append or create
	__MSG__="useage : setlog  \"file/to/log/to\" [\"overwrite\"]"
	[ $# -le 0 ] && exception $__MSG__
	__MSG__="setlog - refusing to overwrite existing file\nuseage : setlog  \"file/to/log/to\" [\"overwrite\"\]"
	[ $# -eq 2 -a "${2}" != "0" ] && append=$FALSE #overwrite or create
	ACSO_FUNCS_MSG_LOGFILE="${1}"
	[ ${append} == $TRUE ] && echo >> "${ACSO_FUNCS_MSG_LOGFILE}" || echo > "${ACSO_FUNCS_MSG_LOGFILE}"
	[ -w "${ACSO_FUNCS_MSG_LOGFILE}" ] || exception 'setlog - log file is not writeble'
}
#---------------------------------------------------------------------------
# echo handler that will optionally log to the file: ACSO_FUNCS_MSG_LOGFILE
# if exists and is writeable
# uses printf to echo to the screen or switches to reading from standard input
# if there is no command line arguments.
#---------------------------------------------------------------------------
lecho(){
	local logfile
	logfile="/dev/null"
	 [ -w "${ACSO_FUNCS_MSG_LOGFILE}" ] && logfile=${ACSO_FUNCS_MSG_LOGFILE}
	 if [ -z "$1" ]; then
			 cat
	 else
			 printf "${@}\n"
			 #echo $@
	 fi | tee -a "$logfile"
}


#---------------------------------------------------------------------------
# Help Handler
#---------------------------------------------------------------------------
Usage(){
	echo -e ${UsageStr}
	exit 0
}
#---------------------------------------------------------------------------
# exit Handler
#---------------------------------------------------------------------------

quiet_exit(){
	local __MSG__
	__MSG__="${versionstring} : ${1} ...User quit!"
	lecho "${__MSG__}"
	exit 0
}
#---------------------------------------------------------------------------
# exit Handler
#---------------------------------------------------------------------------
alldone(){
	local __MSG__
	__MSG__="${versionstring} : ${1} \n\t...Done!"
	lecho "${__MSG__}"
	exit 0
}
#---------------------------------------------------------------------------
# Error Handler
#---------------------------------------------------------------------------
die(){
	local __MSG__
	__MSG__="${versionstring} line $(caller 1)\nError : ${1}"
	lecho "${__MSG__}"
	exit 1
}
#---------------------------------------------------------------------------
# Error Handler
#---------------------------------------------------------------------------
exception(){
	local __MSG__
  __MSG__="\n****Exception**** \n\n${versionstring} line $(caller 1) \n${1}"
	lecho "${__MSG__}"
	exit 1
}

#---------------------------------------------------------------------------
# dryrun - Really easy to set up a dryrun argument to echo out the actual
#          calls and show what *would* be done - nice for debugging and
#          nice for learning the steps involved
# usage:
# set up a variable and point it to this function
# put the variable in front of any call you want "dry runnable"
# unset the variable to have it do nothing, so the calls are actually made
# see the code for how I've used it.
#---------------------------------------------------------------------------
dryrun(){
	lecho "dryrun:  $@"
}
#---------------------------------------------------------------------------
# deletefile -  just a plain rmy but we can enabe/diable, log to the screen
#          		  or set verbose with just one change
#---------------------------------------------------------------------------
deletefile(){
	lecho  "removing file  ${1}"
	rm -f ${1}
 }
 #---------------------------------------------------------------------------
 # deletefolder -  just a plain rm -r but we can enabe/diable, log to the screen
 #          		  or set verbose with just one change
 #---------------------------------------------------------------------------
 deletefolder(){
	if [ -d ${1} ] ; then
	 	lecho  "removing directory  ${1}"
	 	rm -f ${1}
	else
		lecho "Not a directory : ${1}"
	fi
  }

#---------------------------------------------------------------------------
# wfetch - just a plain wget but we can log to the screen or set verbose with
#          just one changecd_or_die
#---------------------------------------------------------------------------
wfetch(){
 	lecho "wget ${@}"
	lecho $(wget  ${@})
 }
#---------------------------------------------------------------------------
# cfetch - just a plain copy but we can log to the screen or set verbose with
#          just one change
#---------------------------------------------------------------------------
cfetch(){
	lecho "cp ${@}"
 	cp ${@}
 }
#---------------------------------------------------------------------------
# untar - tar verbosity is overkill for these purposes
# makes it simpler to show what is being done
#---------------------------------------------------------------------------
 untar(){
	 lecho "tar xf ${@}"
	 tar xf ${@}

 }
 #---------------------------------------------------------------------------
 # cd_or_die - just a plain cd (change directory)
 #                 with some checks and info output
 #---------------------------------------------------------------------------
 cd_or_die(){
	 #echo  $(caller )
	 lecho "Changing directory into ${1}"
	 cd "${1}" ||  die "Unable to change into directory: ${1}"
	 lecho "current directory is now ${PWD}"
  }
#---------------------------------------------------------------------------
# mkdir_or_die - just a plain mkdir
#                 with some checks and info output
#---------------------------------------------------------------------------
mkdir_or_die(){
  lecho "Create directory ${1}"
  mkdir -p "${1}" || die "Unable to create directory: ${1}"
  lecho  "created directory ${1}\n"
 }
#---------------------------------------------------------------------------
# fetchfile - crude protocol handler for local files or urls
#---------------------------------------------------------------------------
function fetchfile(){
  uri=$( echo $1 |  grep -Eo '(http|https)://' )
  if [ "${uri}" == "http://"  -o  "${uri}" == "https://" ] ; then
    lecho "calling wfetch =${f}="
     wfetch "${f}"
  else
		lecho "calling cfetch =${f}="
     cfetch "${f}" "."
  fi
}
#---------------------------------------------------------------------------
# load_config - simple function to load a text file and read configuration
#             from it - safer that 'source log filename'
#---------------------------------------------------------------------------
function load_config(){
  [ -f "${@}" ] || die "Open file. ${@} - file not found"
  cfg_data=$(cat "${@}" | grep "=")
	config_vars=""
  for line in $cfg_data; do
    [[ "${line}" =~ .*"#".* ]] && continue #skip anything that has a comment in it
		IFS="="
    read -r __p __v <<< "${line}"
		unset IFS
		[[ -z "${__v%%*( )}"  ]] && continue #skip anything that nothing after the delimiter (=)
    eval ${__p//[[:space:]]}=${__v//[[:space:]]}
		config_vars+="${__p} "
		unset cfg_data
		unset line
		unset __p
		unset __v
  done


}
#---------------------------------------------------------------------------
# get_yesno - simple function to get user input yes/no in the form of y or n
#             $response is set to a lowercase ve:rsion of valid input
#---------------------------------------------------------------------------
function get_yesno(){
	#lets keep our main script namespace clean
	local errprefix errmessage
	errprefix="\n  > function get_yesno()  \n"
  errmessage=" > This function requires a prompt string containing [Y/n] or [y/N].
  > Thats a set of square brackets containing EXACTLY 3 characters, Y and / and N
  > There are NO substitutions for ANY of these characters other that upper/lower case
  > One character MUST be uppercase and the other MUST be lowercase, which one is up to you.
  > The uppercase character will be the default if enter is pressed alone
  > The prompt  was :\n  > \"${@}\"\n"
  #Clearer than mud??
	#set -x
	ACSO_GET_YES_NO_RESPONSE=""
	f=$(echo "${@}" | sed -e 's/.*\[\(.*\)\].*/\1/')
  [ "${f}" == "" -o ${#f} -ne 3 ] && exception "${errprefix} ${errmessage}"

  if [[ "${f:0:1}" =~ [A-Z] ]] ; then
    defresponse="${f:0:1}"
  elif [[ "${f:2:1}" =~ [A-Z] ]] ; then
    defresponse="${f:2:1}"
  else
    ${errmessage}=$"got a prompt string with no default - no uppercase character in [${f}]\n${errmessage}"
    exception "${errprefix} ${errmessage}"
  fi
  defresponse=${defresponse,,}
	while [ 1 == 1 ] ; do #A very long time ;)
		echo -n "${@}"
		read -r ACSO_GET_YES_NO_RESPONSE
		ACSO_GET_YES_NO_RESPONSE=${ACSO_GET_YES_NO_RESPONSE,,}
    [ "${ACSO_GET_YES_NO_RESPONSE}" == "" ] && ACSO_GET_YES_NO_RESPONSE=${defresponse}
    [[ "${ACSO_GET_YES_NO_RESPONSE:0:1}" =~ [y,n] ]] && break
		echo "Invalid response"
	done
}

function load_kernel_info(){
	#lets keep our main script namespace clean
	local kernel_makefile
	local kernel_infopara
	local dots
	local numdots
	local __p
	local __v
	local OIFS
	OIFS=IFS
  [ $# -eq 1 ] && kernel_makefile="${1}" || kernel_makefile="Makefile"
	[ ! -f "${kernel_makefile}" ] && exception 'useage : load_kernel_info file not found:\"${1}\"'
	kernel_infopara=$(head -n 6 ${kernel_makefile})
  IFS=$'\n'
  for line in ${kernel_infopara}; do
	  [[ "${line}" =~ .*"#".* ]] && continue #skip anything that has a comment in it
		IFS="="
    read -r __p __v <<< "${line}"
		IFS=$'\n'
    __v=$(echo "${__v}"  | sed -e 's/^[[:space:]]*//')
    eval "ACSO_KERNEL_${__p//[[:space:]]}=\"${__v}\""
  done
	IFS=$OIFS
	ACSO_KERNEL_STRING=''
	ACSO_KERNEL_STRING_ERROR=$TRUE
  [ ! -z "${ACSO_KERNEL_VERSION}" ] && ACSO_KERNEL_STRING="${ACSO_KERNEL_VERSION}"
	if [ ! -z "${ACSO_KERNEL_STRING}" ] ; then
		[ ! -z "${ACSO_KERNEL_PATCHLEVEL}" ] && ACSO_KERNEL_STRING+=".${ACSO_KERNEL_PATCHLEVEL}"
		[ ! -z "${ACSO_KERNEL_SUBLEVEL}" ] && ACSO_KERNEL_STRING+=".${ACSO_KERNEL_SUBLEVEL}"
		[ ! -z "${ACSO_KERNEL_EXTRAVERSION}" ] && ACSO_KERNEL_STRING+="${ACSO_KERNEL_EXTRAVERSION}"
		dots="${ACSO_KERNEL_STRING//[^.]}"
		if [ "${#dots}" -eq  2 ]; then
			 ACSO_KERNEL_STRING_ERROR=$FALSE
			 ACSO_KERNEL_FULLNAME="linux-${ACSO_KERNEL_STRING}"
			 ACSO_KERNEL_LOGFILE="../${ACSO_KERNEL_FULLNAME}_Build.log"
		else
			 ACSO_KERNEL_STRING_ERROR=$TRUE
			 ACSO_KERNEL_FULLNAME=''
			 ACSO_KERNEL_LOGFILE="../${appname}_log"
		fi
	fi
}


xmlgetnext () {
   local IFS='>'
   read -d '<' TAG VALUE
}

function get_item(){
	local result_field
  useage="get_item search_string (result_field) optional "
	[ $# -le 0 ] && exception  "get_item search_string (result_field) optional "
	[ $# -eq 2 ] && result_field="${2}"
	local match
	match=$FALSE
	local IFS='>'
	echo "${ACSO_KERNEL_INFO_ARRAY_STR}" | while read -d '<' TAG VALUE ; do
	#echo -e "${TAG}=${VALUE}\n"
	 case $TAG in
      'item')
			   title=''
				 version=''
				 branch=''
         endoflife=''
         source=''
         released=''
				 url=''
         ;;
      'title')
         title="${VALUE}"
				 [ "${VALUE}" == "${1}" ] && match=$TRUE
	       ;;
      'version')
         version="${VALUE}"
				 [ "${VALUE}" == "${1}" ] && match=$TRUE
         ;;
      'branch')
				 branch="${VALUE}"
				 [ "${VALUE}" == "${1}" ] && match=$TRUE
         ;;
      'endoflife')
				endoflife="${VALUE}"
				[ "${VALUE}" == "${1}" ] && match=$TRUE
         ;;
			'source')
				source="${VALUE}"
				[ "${VALUE}" == "${1}" ] && match=$TRUE
			 	 ;;
			'released')
				released="${VALUE}"
				[ "${VALUE}" == "${1}" ] && match=$TRUE
				 ;;
			'url' )
				url="${VALUE}"
				[ "${VALUE}" == "${1}" ] && match=$TRUE
				 ;;
      '/item')
				if [ "${match}" == "$TRUE" ] ; then
					if [ ! -z "${result_field}" ] ; then
						declare -A rec
						rec["title"]="${title//[[:space:]]}"
						rec["version"]="${version//[[:space:]]}"
						rec["branch"]="${branch//[[:space:]]}"
						rec["endoflife"]="${endoflife//[[:space:]]}"
						rec["source"]="${source//[[:space:]]}"
						rec["released"]="${released//[[:space:]]}"
						rec["url"]="${url//[[:space:]]}"
						#for f in 'title version branch endoflife source released url' ;
						for f in "${!rec[@]}" ;
						do
							if [ "${result_field}" == "${f}" ] ; then
								echo "${rec[$f]}"
								return 0
							fi
						done
					else
						record="<title>${title//[[:space:]]}</title>"
						record+="<version>${version//[[:space:]]}</version>"
						record+="<branch>${branch//[[:space:]]}</branch>"
						record+="<endoflife>${endoflife//[[:space:]]}</endoflife>"
						record+="<source>${source//[[:space:]]}</source>"
						record+="<released>${released//[[:space:]]}</released>"
						record+="<url>${url//[[:space:]]}</url>"
						echo "${record}"
						return 0
					fi
				fi
				match=$FALSE
         ;;
      esac
done
return 1
}


xmlgetnext () {
   local IFS='>'
   read -d '<' TAG VALUE
}

function get_linuxinfo(){
	local tv1
	local tv2
	local tv3
	local EOF
	local myxml
	local uri
	local result
	local tmpfile
	record=""
	result=""
	EOF=$FALSE
	uri=https://www.kernel.org/feeds/kdist.xml
	myxml=/tmp/kerninfo.xml
	[ ! -d $myxml ] && wget --quiet -O /tmp/kerninfo.xml $uri
cat $myxml | while xmlgetnext ; do
   case "${TAG}" in
      'item')
				 title=''
         link=''
         released=''
         description=''
         ;;
      'title')
					OIFS=$IFS
					IFS=":"
					#echo "title =${VALUE}"
					read -r tv1 tv2 <<< "${VALUE}"
		 			IFS=$OIFS
          title=${tv1//[[:space:]]}
					branch=${tv2//[[:space:]]}
					# echo "title =${title}"
					# echo "branch =${branch}"
					[ "${title:0:4}" == "next" ] && break
					#echo "title=$title"
         ;;
      'link')
         link="${VALUE}//[[:space:]]"
         ;;
      'pubDate')
         released=$( date --date "${VALUE}" '+%D %H:%M%P' )
				 ;;
			'description')
    		 url=$( echo "${VALUE}" | grep -E -o 'https.*linux-([0-9]{1,}\.)+[0-9]{1,}' | head -n 1 |cut -d\" -f 1)
				 # Seems bogus to turn &lt to < and then delete all tags but (I was rally tired at the time)
				 # I couldnt get the &gt/%lts out - Hmmm
				 tv1=$( echo "${VALUE}" | sed -e 's/&lt;/</g' -e 's/&gt;/>/g' -e 's/<[^>]*>//g' -e 's/:/=/g' )
				 description="$tv1"
				 tv1=$(echo "${description}" | grep -i "\(EOL\)")
	 			 [ ! -z "${tv1}" ] && endoflife="Yes" || endoflife="No"
				 OIFS=$IFS${EOF}
				 IFS=$'\n'
				 for tv3 in $description ; do
				 	tv3="${tv3//[[:space:]]}"
					IFS="="
					read -r tv1 tv2 <<< "${tv3}"
					tv2=$( echo "${tv2//[[:space:]]}" |  sed -re 's/[(]/=/g' -re 's/[)]//g' ) #'s/(/_/g' -e 's/a/a/g'  )
					if [ ! -z "${tv1}" -a ! -z "${tv2}" ] ; then
						[ "${tv2:0:4}" == "next" ] && break
						case "${tv1,,}" in
							'version')
								read -r tv2 branch <<< ${tv2}
								#echo "eval ${tv1,,}=${tv2}"
								version="${tv2}"
								;;
							'source')
							 source=="${tv2}"
							 ;;

						 esac
					fi
					IFS=$'\n'
				 done
				 IFS=$OIFS
         ;;
      '/item')
			record="<title>${title//[[:space:]]}</title>"
			record+="<version>${version//[[:space:]]}</version>"
			record+="<branch>${branch//[[:space:]]}</branch>"
			record+="<endoflife>${endoflife//[[:space:]]}</endoflife>"
			record+="<source>${source//[[:space:]]}</source>"
			record+="<released>${released//[[:space:]]}</released>"
			record+="<url>${url//[[:space:]]}</url>"
			result="<item>${record}</item>"
			echo "${result}"
   ;;
      esac
done

}


function dump_kerninfo(){
	local IFS='>'
	echo "${ACSO_KERNEL_INFO_ARRAY_STR}" | while read -d '<' TAG VALUE ; do
		if [ "${TAG}" = "item" ]  ; then
			echo "\n${TAG}"
		else
			[ "${TAG:0:1}" != "/" ] &&	echo "\n\t${TAG//[[:space:]]}=${VALUE//[[:space:]]}"
		fi
	done
}



function test_customarray(){
ACSO_KERNEL_INFO_ARRAY_STR=$(get_linuxinfo)
echo -e $(dump_kerninfo)
echo
echo $(get_item "5.14-rc5" 'url')
echo
echo $(get_item "4.19.202")
}

#
# function self_check(){
#   include_file=${lib_dir}/${___ME___}
#   shafile=${include_file}.sha
# 	#echo $shafile
#
#   while IFS= read -r line || [ -n "$line" ]; do
#     OIFS=$IFS
#   		IFS=" "
#       read -r hash func <<< "${line}"
#   		IFS=$OIFS
#       [ "${func}" == ${___ME___} ] && break
#   done < $shafile
#
#   if [ ! -z "${hash}"  ] ; then
#     if [[ "$(echo "${hash} ${include_file}"| sha1sum -c - )" != *"OK"* ]] ; then
# 			die "${___ME___} is corrupt or has been modified - suggest you re-download"
# 		fi
#   else
#     die "No hash to check file : ${include_file}"
#   fi
# }
#
# self_check
#

# I've given up on this as a PITA
# keeping the code here to remember how I did it
#

# function libinclude(){
#   #for now I'll read the hash from a file -
#   #later change that to retrieve said file from the repo
#   # its really kinda overkill -
#   # I have code in the include file to check this file against a hash as well
#   if [ $# -lt 1 ]; then
#     errmessage=" > This function accepts one mandtory argument.
#     > Being the file to be included"
#     exception "${errmessage}"
#   fi
#
#   include_file=${lib_dir}/${1}
#   shafile=${include_file}.sha
#
#   while IFS= read -r line || [ -n "$line" ]; do
#     OIFS=$IFS
#   		IFS=" "
#       read -r hash func <<< "${line}"
#   		IFS=$OIFS
#       [ "${func}" == ${1} ] && break
#   done < $shafile
# #  echo "hash=${hash} include=${include_file}"
#   if [ ! -z "${hash}"  ] ; then
#     if [[ "$(echo "${hash} ${include_file}"| sha1sum -c - )" == *"OK"* ]] ; then
#       source "${include_file}"
#     else
#       echo "Error - include file : ${include_file} ... missing or corrupt"
#       echo "${hash} ${include_file}"
#       exit
#     fi
#   else
#     echo "No hash to check file : ${include_file}"
#     exit
#   fi
# }
